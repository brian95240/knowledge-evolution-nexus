#cloud-config
# K.E.N. Quintillion System - Cloud Init Configuration
# Version: 2.0.0-quintillion

# Update system
package_update: true
package_upgrade: true

# Install required packages
packages:
  - curl
  - wget
  - git
  - htop
  - nano
  - unzip
  - jq
  - python3
  - python3-pip
  - postgresql-client
  - docker.io
  - docker-compose

# Configure Docker
runcmd:
  # Enable and start Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker root
  
  # Install kubectl
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl
  - mv kubectl /usr/local/bin/
  
  # Install Helm
  - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  
  # Install Python dependencies
  - pip3 install psycopg2-binary requests flask gunicorn redis celery prometheus-client
  
  # Create directories
  - mkdir -p /opt/ken-system
  - mkdir -p /var/log/ken-system
  - mkdir -p /etc/ken-system
  
  # Set up log rotation
  - echo "/var/log/ken-system/*.log { daily rotate 7 compress delaycompress missingok notifempty }" > /etc/logrotate.d/ken-system
  
  # Configure system limits
  - echo "* soft nofile 65536" >> /etc/security/limits.conf
  - echo "* hard nofile 65536" >> /etc/security/limits.conf
  - echo "vm.max_map_count=262144" >> /etc/sysctl.conf
  
  # Create ken user
  - useradd -m -s /bin/bash ken
  - usermod -aG docker ken
  
  # Set timezone
  - timedatectl set-timezone UTC
  
  # Configure automatic updates
  - echo 'Unattended-Upgrade::Automatic-Reboot "false";' >> /etc/apt/apt.conf.d/50unattended-upgrades
  
  # Create system info
  - echo "K.E.N. Quintillion System v2.0.0-quintillion" > /etc/motd
  - echo "Enhancement Factor: 1.73 QUINTILLION x" >> /etc/motd
  - echo "49 Algorithm Engine Ready" >> /etc/motd
  - echo "Initialized: $(date)" >> /etc/motd

# Write files
write_files:
  # K.E.N. system service
  - path: /etc/systemd/system/ken-system.service
    content: |
      [Unit]
      Description=K.E.N. Quintillion System
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=notify
      ExecStart=/opt/ken-system/start.sh
      ExecStop=/opt/ken-system/stop.sh
      Restart=always
      RestartSec=10
      User=ken
      Group=ken
      
      [Install]
      WantedBy=multi-user.target
    permissions: '0644'
  
  # System monitoring script
  - path: /opt/ken-system/monitor.sh
    content: |
      #!/bin/bash
      # K.E.N. System Monitoring Script
      
      LOG_FILE="/var/log/ken-system/monitor.log"
      
      log() {
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> $LOG_FILE
      }
      
      # Check system resources
      CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
      MEMORY_USAGE=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
      DISK_USAGE=$(df -h / | awk 'NR==2{printf "%s", $5}' | sed 's/%//')
      
      log "CPU: ${CPU_USAGE}% | Memory: ${MEMORY_USAGE}% | Disk: ${DISK_USAGE}%"
      
      # Check K.E.N. services
      if kubectl get pods -n ken-system &> /dev/null; then
          PODS_RUNNING=$(kubectl get pods -n ken-system --no-headers | grep Running | wc -l)
          PODS_TOTAL=$(kubectl get pods -n ken-system --no-headers | wc -l)
          log "K.E.N. Pods: ${PODS_RUNNING}/${PODS_TOTAL} running"
      fi
      
      # Alert if resources are high
      if (( $(echo "$CPU_USAGE > 80" | bc -l) )); then
          log "WARNING: High CPU usage: ${CPU_USAGE}%"
      fi
      
      if (( $(echo "$MEMORY_USAGE > 80" | bc -l) )); then
          log "WARNING: High memory usage: ${MEMORY_USAGE}%"
      fi
      
      if [ "$DISK_USAGE" -gt 80 ]; then
          log "WARNING: High disk usage: ${DISK_USAGE}%"
      fi
    permissions: '0755'
  
  # Backup script
  - path: /opt/ken-system/backup.sh
    content: |
      #!/bin/bash
      # K.E.N. System Backup Script
      
      BACKUP_DIR="/opt/ken-system/backups"
      DATE=$(date +%Y%m%d_%H%M%S)
      
      mkdir -p $BACKUP_DIR
      
      # Backup Kubernetes configs
      kubectl get all -n ken-system -o yaml > $BACKUP_DIR/ken-system-${DATE}.yaml
      
      # Backup logs
      tar -czf $BACKUP_DIR/logs-${DATE}.tar.gz /var/log/ken-system/
      
      # Clean old backups (keep 7 days)
      find $BACKUP_DIR -name "*.yaml" -mtime +7 -delete
      find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
      
      echo "Backup completed: $DATE"
    permissions: '0755'

# Configure cron jobs
runcmd:
  # System monitoring every 5 minutes
  - echo "*/5 * * * * /opt/ken-system/monitor.sh" | crontab -
  
  # Daily backup at 2 AM
  - echo "0 2 * * * /opt/ken-system/backup.sh" | crontab -
  
  # Weekly system update on Sunday at 3 AM
  - echo "0 3 * * 0 apt update && apt upgrade -y" | crontab -

# Final setup
final_message: |
  K.E.N. Quintillion System server initialization complete!
  
  ðŸš€ Enhancement Factor: 1.73 QUINTILLION x
  âš¡ 49 Algorithm Engine: Ready
  ðŸŽ¯ Target Cost: â‚¬23.46/month
  
  Next steps:
  1. Deploy K.E.N. system with Kubernetes
  2. Initialize database schema
  3. Configure monitoring dashboards
  
  System is ready for K.E.N. deployment!

